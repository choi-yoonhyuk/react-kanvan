{"version":3,"sources":["atoms.tsx","components/DragabbleCard.tsx","components/Board.tsx","components/CreateBoard.tsx","App.tsx","index.tsx","theme.ts"],"names":["localData","localStorage","getItem","toDoState","atom","key","default","JSON","parse","Doing","Done","Card","styled","div","props","isDragging","theme","cardColor","DragabbleCard","toDoId","toDoText","index","draggableId","toString","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","React","memo","Wrapper","boardColor","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","toDos","boardId","setToDos","useSetRecoilState","useForm","register","setValue","handleSubmit","onSubmit","toDo","newToDo","id","Date","now","text","allBoards","setItem","stringify","console","log","required","type","placeholder","droppableId","Boolean","draggingFromThisWith","droppableProps","map","Input","input","Button","button","CreateBoard","useRecoilState","board","newBoard","allboard","maxLength","Boards","App","onDragEnd","info","destination","source","boardCopy","taskObj","splice","sourceBoard","destinationBoard","Object","keys","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.892750d0.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nconst localData = localStorage.getItem(\"todos\");\n\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\ninterface IToDoState {\n  [key: string]: ITodo[];\n}\n\nexport const toDoState = atom<IToDoState>({\n  key: \"todos\",\n  default: localData\n    ? JSON.parse(localData)\n    : {\n        \"To Do\": [],\n        Doing: [],\n        Done: [],\n      },\n});\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div<{ isDragging: boolean }>`\n  border-radius: 5px;\n  margin-bottom: 5px;\n  padding: 10px;\n  background-color: ${(props) =>\n    props.isDragging ? \"#e4f2ff\" : props.theme.cardColor};\n  box-shadow: ${(props) =>\n    props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.05)\" : \"none\"};\n`;\n\ninterface IDragabbleCardProps {\n  toDoId: number;\n  toDoText: string;\n  index: number;\n}\n\nfunction DragabbleCard({ toDoId, toDoText, index }: IDragabbleCardProps) {\n  return (\n    <Draggable draggableId={toDoId.toString()} index={index}>\n      {(provided, snapshot) => (\n        <Card\n          isDragging={snapshot.isDragging}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          {toDoText}\n        </Card>\n      )}\n    </Draggable>\n  );\n}\n// React.memo는 불필요한 렌더링을 방지한다.\nexport default React.memo(DragabbleCard);\n","import styled from \"styled-components\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport DragabbleCard from \"./DragabbleCard\";\nimport { useForm } from \"react-hook-form\";\nimport { ITodo, toDoState } from \"../atoms\";\nimport { useSetRecoilState } from \"recoil\";\n\nconst Wrapper = styled.div`\n  width: 300px;\n  padding-top: 10px;\n  background-color: ${(props) => props.theme.boardColor};\n  border-radius: 5px;\n  min-height: 300px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-weight: 600;\n  margin-bottom: 10px;\n  font-size: 18px;\n`;\n\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? \"#dfe6e9\"\n      : props.isDraggingFromThis\n      ? \"#b2bec3\"\n      : \"transparent\"};\n  flex-grow: 1;\n  transition: background-color 0.3s ease-in-out;\n  padding: 20px;\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  input {\n    width: 100%;\n  }\n`;\n\ninterface IAreaProps {\n  isDraggingFromThis: boolean;\n  isDraggingOver: boolean;\n}\n\ninterface IBoardProps {\n  toDos: ITodo[];\n  boardId: string;\n}\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction Board({ toDos, boardId }: IBoardProps) {\n  const setToDos = useSetRecoilState(toDoState);\n  const { register, setValue, handleSubmit } = useForm<IForm>();\n  const onValid = ({ toDo }: IForm) => {\n    const newToDo = {\n      id: Date.now(),\n      text: toDo,\n    };\n    setToDos((allBoards) => {\n      // 로컬스토리지에 저장\n      localStorage.setItem(\n        \"todos\",\n        JSON.stringify({\n          ...allBoards,\n          [boardId]: [newToDo, ...allBoards[boardId]],\n        }))\n\n      return {\n        ...allBoards,\n        [boardId]: [newToDo, ...allBoards[boardId]],\n      };\n    });\n    console.log([boardId],[newToDo])\n    setValue(\"toDo\", \"\");\n\n  };\n  \n  return (\n    <Wrapper>\n      <Title>{boardId}</Title>\n      <Form onSubmit={handleSubmit(onValid)}>\n        <input\n          {...register(\"toDo\", { required: true })}\n          type=\"text\"\n          placeholder={`Add task on ${boardId}`}\n        />\n      </Form>\n      <Droppable droppableId={boardId}>\n        {(provided, snapshot) => (\n          <Area\n            isDraggingOver={snapshot.isDraggingOver}\n            isDraggingFromThis={Boolean(snapshot.draggingFromThisWith)}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n          >\n            {toDos.map((toDo, index) => (\n              <DragabbleCard\n                key={toDo.id}\n                index={index}\n                toDoId={toDo.id}\n                toDoText={toDo.text}\n              />\n            ))}\n            {provided.placeholder}\n          </Area>\n        )}\n      </Droppable>\n    </Wrapper>\n  );\n}\n\nexport default Board;\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"../atoms\";\n\nconst Wrapper = styled.div`\n  margin-top: 100px;\n  padding-left: 40%;\n`;\n\nconst Form = styled.form`\n  max-width: 300px;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: ${(props) => props.theme.boardColor};\n  padding: 20px 10px;\n  margin-left: 20px;\n  margin-bottom: 300px;\n  border-radius: 20px;\n  box-shadow: 2px 5px 5px rgba(0, 0, 0, 0.3);\n  flex-grow: 1;\n`;\n\nconst Input = styled.input`\n  text-align: center;\n`;\n\nconst Button = styled.button``;\n\ninterface IAddBoard {\n  board: string;\n}\n\nfunction CreateBoard() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const { register, setValue, handleSubmit } = useForm();\n  const onValid = ({ board }: IAddBoard) => {\n    \n    const newBoard = { [board]: [] };\n    console.log(newBoard);\n    setToDos((allboard) => {\n      localStorage.setItem(\n        \"board\",\n        JSON.stringify({ ...allboard, ...newBoard })\n      );\n\n      return { ...allboard, ...newBoard };\n    });\n    setValue(\"board\", \"\");\n  };\n\n  return (\n    <Wrapper>\n      <Form onSubmit={handleSubmit(onValid)}>\n        <Input\n          {...register(\"board\", {\n            required: true,\n          })}\n          type=\"text\"\n          placeholder=\"Add\"\n          maxLength={15}\n        />\n        <Button>Add Board</Button>\n      </Form>\n    </Wrapper>\n  );\n}\n\nexport default CreateBoard;\n","import { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./components/Board\";\nimport CreateBoard from \"./components/CreateBoard\";\nimport DragabbleCard from \"./components/DragabbleCard\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  margin: 0 auto;\n  max-width: 700px;\n  width: 100%;\n  justify-content: center;\n  align-items: flex-start;\n  height: 100vh;\n`;\n\nconst Boards = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-auto-rows: minmax(250px, 1fr);\n  place-content: center center;\n  gap: 10px;\n  width: 100%;\n`;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDragEnd = (info: DropResult) => {\n    const { destination, source } = info;\n    if (!destination) return;\n    if (destination?.droppableId === source.droppableId) {\n      // 같은 보드끼리 움직임.\n      setToDos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        console.log(boardCopy);\n        const taskObj = boardCopy[source.index];\n        console.log(taskObj);\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination?.index, 0, taskObj);\n\n        // 로컬스토리지에 저장\n\n        localStorage.setItem(\n          \"todos\",\n          JSON.stringify({\n            ...allBoards,\n            [source.droppableId]: boardCopy,\n          })\n        );\n\n        // console.log(\n        //   source.index,\n        //   \"번째 인덱스를 끌어온다\",\n        //   source.index,\n        //   \"번째 인덱스는 기존자리에서 제거됨\"\n        // );\n        // console.log(\n        //   \"도착값인\",\n        //   destination.index,\n        //   \"번째 인덱스에\",\n        //   \"끌고온\",\n        //   taskObj,\n        //   \"를 삽입\"\n        // );\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n          // \"Doing\" : [e,c,d]\n        };\n      });\n    }\n    if (destination?.droppableId !== source.droppableId) {\n      // 다른 보드끼리 움직임.\n      setToDos((allBoards) => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const taskObj = sourceBoard[source.index];\n        const destinationBoard = [...allBoards[destination.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        destinationBoard.splice(destination?.index, 0, taskObj);\n\n        //로컬스토리지에 저장\n\n        localStorage.setItem(\n          \"todos\",\n          JSON.stringify({\n            ...allBoards,\n            [source.droppableId]: sourceBoard,\n            [destination.droppableId]: destinationBoard,\n          })\n        );\n\n        // console.log(\n        //   source.index,\n        //   \"번째 인덱스를 끌고온다\",\n        //   source.index,\n        //   \"번째 인덱스는 기존자리에서 제거됨\"\n        // );\n        // console.log(\n        //   source.droppableId,\n        //   \"에 있는\",\n        //   taskObj,\n        //   \"를 끌고와서\",\n        //   destination.droppableId,\n        //   \"의\",\n        //   destination?.index,\n        //   \"번째 인덱스에 삽입.\"\n        // );\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destinationBoard,\n        };\n      });\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <CreateBoard />\n      <Wrapper>\n        <Boards>\n          {Object.keys(toDos).map((boardId) => (\n            <Board boardId={boardId} key={boardId} toDos={toDos[boardId]} />\n          ))}\n        </Boards>\n      </Wrapper>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color: black;\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#3498db\",\n  boardColor: \"#DADFE9\",\n  cardColor: \"white\",\n};\n"],"sourceRoot":""}